<%
  def highlight(code)
    IO.popen("pygmentize -f html -l ruby", 'w+') do |p|
      p.puts code
      p.close_write
      p.read
    end
  end
%>
<!doctype html>
<html>
  <head>
    <title>Daybreak</title>
<!--
             ^^            |
  daybreak     ^^        \ _ /
                      -= /   \ =-
~^~ ^ ^~^~ ~^~ ~ ~^~~^~^-=~=~=-~^~^~^~

-->
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <style>
      /* reset */
      div, html, body {
        margin: 0;
        padding: 0;
        border: 0;
        vertical-align: baseline;
      }

      ul { list-style: none; padding-left: 10px;}
      li { margin-bottom: 1em; }
      /* text styles */
      body {
        font-family: "Helvetica Nueue", Helvetica, sans-serif;
        font-size: 14px;
        line-height: 1.7em;
        margin-left: auto;
        margin-right: auto;
        width: 600px;
        padding: 20px;
      }
      p, li {
        width: 600px;
        margin: 0px 0px 1em;
      }

      h1, h2, h3 {
        text-rendering: optimizeLegibility;
        margin-left: -5px;
      }

      h4 {
        margin: 0px;
        margin-top: 30px;
        margin-left: -5px;
        font-weight: normal;
      }

      h4 code {
        padding: 4px;
        background-color: #e6f3ff;
      }

      ol {
        padding-left: 0px;
      }

      code, pre, tt { font-family: Monaco, monospace; font-size: 12px; }
      tt { border:1px solid #efefef; padding: 2px;}
      dd { margin-left: 0; }
      dt { margin-left: 1em; }

      a { color: black; }
      a:hover { text-decoration: none; }
      pre {
        padding-left: 10px;
        font-size: 12px;
        border-left: 5px solid #efefef;
        line-height: 1.3;
      }

      #logo {
        border-left: 0px;
      }

      hr {
        border: 0;
        border-top: 1px solid #efefef;
        height: 1px;
      }

      table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1em;
      }

      table td, table th {
        border: 1px solid #efefef;
        margin: 0px 5px;
        text-align: center;
      }
      table th {
        width: 40%;
      }

      table th.crc {
        width: 20%;
      }

      /* styles stolen from docco */
      body .hll { background-color: #ffffcc }
      body .c { color: #408080; font-style: italic }  /* Comment */
      body .err { border: 1px solid #FF0000 }         /* Error */
      body .k { color: #954121 }                      /* Keyword */
      body .o { color: #666666 }                      /* Operator */
      body .cm { color: #408080; font-style: italic } /* Comment.Multiline */
      body .cp { color: #BC7A00 }                     /* Comment.Preproc */
      body .c1 { color: #408080; font-style: italic } /* Comment.Single */
      body .cs { color: #408080; font-style: italic } /* Comment.Special */
      body .gd { color: #A00000 }                     /* Generic.Deleted */
      body .ge { font-style: italic }                 /* Generic.Emph */
      body .gr { color: #FF0000 }                     /* Generic.Error */
      body .gh { color: #000080; font-weight: bold }  /* Generic.Heading */
      body .gi { color: #00A000 }                     /* Generic.Inserted */
      body .go { color: #808080 }                     /* Generic.Output */
      body .gp { color: #000080; font-weight: bold }  /* Generic.Prompt */
      body .gs { font-weight: bold }                  /* Generic.Strong */
      body .gu { color: #800080; font-weight: bold }  /* Generic.Subheading */
      body .gt { color: #0040D0 }                     /* Generic.Traceback */
      body .kc { color: #954121 }                     /* Keyword.Constant */
      body .kd { color: #954121; font-weight: bold }  /* Keyword.Declaration */
      body .kn { color: #954121; font-weight: bold }  /* Keyword.Namespace */
      body .kp { color: #954121 }                     /* Keyword.Pseudo */
      body .kr { color: #954121; font-weight: bold }  /* Keyword.Reserved */
      body .kt { color: #B00040 }                     /* Keyword.Type */
      body .m { color: #666666 }                      /* Literal.Number */
      body .s { color: #219161 }                      /* Literal.String */
      body .na { color: #7D9029 }                     /* Name.Attribute */
      body .nb { color: #954121 }                     /* Name.Builtin */
      body .nc { color: #0000FF; font-weight: bold }  /* Name.Class */
      body .no { color: #880000 }                     /* Name.Constant */
      body .nd { color: #AA22FF }                     /* Name.Decorator */
      body .ni { color: #999999; font-weight: bold }  /* Name.Entity */
      body .ne { color: #D2413A; font-weight: bold }  /* Name.Exception */
      body .nf { color: #0000FF }                     /* Name.Function */
      body .nl { color: #A0A000 }                     /* Name.Label */
      body .nn { color: #0000FF; font-weight: bold }  /* Name.Namespace */
      body .nt { color: #954121; font-weight: bold }  /* Name.Tag */
      body .nv { color: #19469D }                     /* Name.Variable */
      body .ow { color: #AA22FF; font-weight: bold }  /* Operator.Word */
      body .w { color: #bbbbbb }                      /* Text.Whitespace */
      body .mf { color: #666666 }                     /* Literal.Number.Float */
      body .mh { color: #666666 }                     /* Literal.Number.Hex */
      body .mi { color: #666666 }                     /* Literal.Number.Integer */
      body .mo { color: #666666 }                     /* Literal.Number.Oct */
      body .sb { color: #219161 }                     /* Literal.String.Backtick */
      body .sc { color: #219161 }                     /* Literal.String.Char */
      body .sd { color: #219161; font-style: italic } /* Literal.String.Doc */
      body .s2 { color: #219161 }                     /* Literal.String.Double */
      body .se { color: #BB6622; font-weight: bold }  /* Literal.String.Escape */
      body .sh { color: #219161 }                     /* Literal.String.Heredoc */
      body .si { color: #BB6688; font-weight: bold }  /* Literal.String.Interpol */
      body .sx { color: #954121 }                     /* Literal.String.Other */
      body .sr { color: #BB6688 }                     /* Literal.String.Regex */
      body .s1 { color: #219161 }                     /* Literal.String.Single */
      body .ss { color: #19469D }                     /* Literal.String.Symbol */
      body .bp { color: #954121 }                     /* Name.Builtin.Pseudo */
      body .vc { color: #19469D }                     /* Name.Variable.Class */
      body .vg { color: #19469D }                     /* Name.Variable.Global */
      body .vi { color: #19469D }                     /* Name.Variable.Instance */
      body .il { color: #666666 }                     /* Literal.Number.Integer.Long */
    </style>
  </head>
  <body>
    <p>
<pre id="logo">
                                 ^^            |
                      daybreak     ^^        \ _ /
                                          -= /   \ =-
                    ~^~ ^ ^~^~ ~^~ ~ ~^~~^~^-=~=~=-~^~^~^~
</pre>
    <p>
      Daybreak is a simple key value store for ruby. It has user defined persistence,
      and all data is stored in a table in memory, so ruby niceties are available.
      Daybreak's is faster than <tt>pstore</tt> and more convenient than
      <tt>dbm</tt>.
    </p>
    <p>
      The souce is on <a href="http://github.com/propublica/daybreak">Github</a> and you can install it with:
    </p>

<pre>
$ gem install daybreak
</pre>

    <p>(v<%= Daybreak::VERSION %>) | <a href="http://rdoc.info/github/propublica/daybreak/master/frames">API Docs</a> | <a href="http://github.com/propublica/daybreak/issues">Issue Tracker</a></p>

    <h2>Overview</h2>

    <p>
      Daybreak stores data in an append-only file, and values inserted into the
      database are marshalled ruby objects. It includes <tt>Enumerable</tt>
      for functional methods like <tt>map</tt> and <tt>reduce</tt> and emulates
      the interface of a simple ruby hash. Here is the basic api:
    </p>

    <code>
<%= highlight <<-RUBY
  require 'daybreak'

  db = Daybreak::DB.new "example.db"

  # set the value of a key
  db['foo'] = 2

  # set the value of a key and flush the change to disk
  db.set! 'bar', 2

  # all keys are cast to strings via #to_s
  db[1] = 2
  db.keys.include? 1 # => false
  db.keys.include? '1' # => true

  # ensure changes are sent to disk
  db.flush!

  # open up another db client
  db2 = Daybreak::DB.new "example.db"
  db2['foo'] = 3

  # Ruby objects work too
  db2['baz'] = {:one => 1}
  db2.flush!

  # Reread the changed file in the first db
  db.read!
  p db['foo'] #=> 3
  p db['baz'] #=> {:one => 1}

  # Enumerable works too!
  1000.times {|i| db[i] = i }
  p db.reduce(0) {|m, k, v| m + k.last } # => 499500

  # Compaction is always a good idea. It will cut down on the size of the Database
  db.compact!
  p db['foo'] #=> 1
  db2.read!
  p db2['foo'] #=> 1

  # DBs can have default values
  db3 = Daybreak::DB.new "example2.db", 'hello!'
  db3['bingo'] #=> hello!

  # Not a fan of Marshal? Inherit from Daybreak::DB and rewrite serialize and parse
  require 'json'
  class JSONDB < Daybreak::DB
    def serialize(it)
      it.to_json
    end

    def parse(it)
      JSON.parse(it)
    end
  end

  jsondb = JSONDB.new 'json.db'
  jsondb[1] = {'one' => 1}
  jsondb.close!
  jsondb = JSONDB.new 'json.db'
  jsondb[1]
  #=> {'one' => 1}


  # close the databases
  jsondb.close!
  db.close!
  db2.close!
  db3.close!
RUBY
%>
    </code>
    <p>
      <tt>Daybreak::DB</tt> can be subclassed if you want a different serialization
      strategy (for example, JSON). If so override <tt>DB#parse</tt> and <tt>DB#serialize</tt>
    </p>
    <h2>Architecture</h2>

    <p>
      When a Daybreak database is opened it reads the append only file and mirrors
      the data in an in memory hash table for fast reads.
    </p>

    <p>
      Writes to a Daybreak database are asynchronous and each write is queued until
      the file is ready for writing, via
      <a href="http://www.ruby-doc.org/core-1.9.3/IO.html#method-c-select"><tt>IO.select</tt></a>.
      If you want to commit immediately to the file call <tt>flush!</tt> after a
      write.
    </p>

    <p>
      Writes with duplicate keys are simply appended to the end of the file.
      From time to time you will want to run <tt>compact!</tt> which will remove
      old commits from the file and create a smaller logfile. This will shrink the
      space necessary to store the data on disk.
    </p>

    <h2>File Format</h2>

    <p>
      Daybreak stores its data in the simplest file format imaginable. Each
      Daybreak file is an append only log consisting of alternating key and value cells.
      Every key-value pair also has an associated 32 bit CRC field to protect against bad data.
      Each cell starts with a 32 bit unsigned big-endian integer. The key cell has a deleted
      flag that is one bit in the most significant digit, and 31 bits representing
      the cell's length. The data cell is just a 32 bit length.
      Here is how a database of one record might look:
    </p>

      <table>
        <tr>
          <th class="key">Deleted?</th>
          <th class="key" colspan="2">Key</th>
          <th class="key" colspan="2">Value</th>
          <th class="key">CRC</th>
        </tr>
        <tr>
          <td rowspan="2">Deleted Flag (1&nbsp;bit)</td>
          <td>Encoded Length (31 bits)</td>
          <td>String&nbsp;Key</td>
          <td>Encoded&nbsp;Length (32&nbsp;bits)</td>
          <td>Marshalled Value</td>
          <td rowspan="2"><small>CRC32(key,&nbsp;value)</small></td>
        </tr>
        <tr>
          <td>(...)0000101</td>
          <td>hello</td>
          <td>(...)0001010</td>
          <td>&lt;marshalled value&gt;</td>
        </tr>
      </table>

    <p>
      These values are all read into an in memory hash table and commits to the
      database are queued for writing when the OS signals the file is ready.
      A reminder: pass <tt>true</tt> as the last argument to <tt>set</tt>, or
      call <tt>flush!</tt> if you want commits to block and be written to
      the filesystem.
    </p>

    <h2>In the Wild</h2>
    <ul>
      <li>
        The <a href="http://projects.propublica.org/emails/">Message Machine</a> uses
        Daybreak to store word frequencies and indexes for search and document
        clustering.
      </li>
    </ul>

    <h2>Change Log</h2>

    <dl>
      <dd><b>0.1.2</b></dd>
      <dt>Fix <tt>compact!</tt> segfault or deadlock on 1.8.7-p371, and huge cleanup and speedup thanks to <a href="https://github.com/minad">minad</a>!</dt>
      <dd><b>0.1.1</b></dd>
      <dt>Fix file handling and possible segfault on some systems when using <tt>clear</tt></dt>
      <dd><b>0.1.0</b></dd>
      <dt>Make Daybreak compatible with <a href="https://github.com/minad/moneta">moneta</a>, and add a delete operation. This represents a slight change to the log file format. (thanks <a href="https://github.com/minad">minad</a>)</dt>
      <dd><b>0.0.4</b></dd>
      <dt>Fix a bug in compact! to allow for inhherited DBs (thanks <a href="https://github.com/jlapier">jlapier</a>)</dt>
      <dd><b>0.0.3</b></dd>
      <dt>Add support for windows rubies (thanks to <a href="https://github.com/rob99">rob99</a>
        for help tracking down the issue.)</dt>
      <dd><b>0.0.2</b></dd>
      <dt>Fix bug with calls to <tt>empty!</tt>.</dt>
      <dd><b>0.0.1</b></dd>
      <dt>Initial release.</dt>
    </dl>

    <h2>License</h2>

<pre>
Copyright (c) 2012, ProPublica

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is furnished
to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
</pre>

    <p><em>Daybreak is a project of ProPublica.</em></p>
  </body>
</html>
